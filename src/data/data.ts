// --- Data ---
// Let's assume this data is coming from separate JSON files.
const HtmlData = { "topic": "HTML", "questions": [ { "id": 1, "level": "Basic", "sub_topic": "Tags and Elements", "question_en": "What is an HTML tag?", "question_bn": "HTML ট্যাগ কী?", "details": { "what_is_en": "HTML tags are keywords enclosed in angle brackets (< >) that tell the browser how to display content.", "what_is_bn": "HTML ট্যাগ হলো অ্যাঙ্গেল ব্র্যাকেট (< >) দিয়ে ঘেরা কীওয়ার্ড, যা ব্রাউজারকে বলে দেয় কীভাবে কন্টেন্ট প্রদর্শন করতে হবে।" }, "vip_qa": { "question_en": "What is the core difference between <b> and <strong> tags?", "answer_en": "The <b> tag only makes text bold visually, carrying no semantic meaning. The <strong> tag, however, makes the text bold and also signifies to browsers and screen readers that the content is important. For SEO and Accessibility, <strong> should be used." } } ] };
const CssData = { "topic": "CSS", "questions": [ { "id": 17, "level": "Basic", "sub_topic": "Selectors and Basic Styling", "question_en": "What is CSS?", "question_bn": "CSS কী?", "details": { "what_is_en": "CSS (Cascading Style Sheets) is a style sheet language used for describing the presentation of a document written in a markup language like HTML.", "what_is_bn": "CSS হলো একটি স্টাইল শিট ভাষা যা HTML ডকুমেন্টের presentation বর্ণনা করতে ব্যবহৃত হয়।" }, "vip_qa": { "question_en": "What does the term 'Cascading' mean in CSS?", "answer_en": "'Cascading' refers to the algorithm that determines how styles are applied to an element when multiple rules could apply. It's a priority scheme based on three factors: 1) Specificity, 2) Importance (`!important`), and 3) Source Order." } } ] };
const JavascriptData = { "topic": "JavaScript", "questions": [ { "id": 28, "level": "Basic", "sub_topic": "Variables and Data Types", "question_en": "What is the difference between `var`, `let`, and `const`?", "question_bn": "`var`, `let`, এবং `const` এর মধ্যে পার্থক্য কী?", "details": { "what_is_en": "`var` is function-scoped. `let` and `const` are block-scoped. `let` can be reassigned, but `const` cannot.", "what_is_bn": "`var` ফাংশন-স্কোপড। `let` এবং `const` ব্লক-স্কোপড। `let`-এর মান পরিবর্তন করা যায় কিন্তু `const`-এর যায় না।" }, "vip_qa": { "question_en": "Explain the concept of the Temporal Dead Zone (TDZ) for `let` and `const`.", "answer_en": "The Temporal Dead Zone (TDZ) is the period between entering a block scope and the actual declaration of a `let` or `const` variable. Accessing them during this 'dead zone' will result in a `ReferenceError`." } } ] };
const ReactData = { "topic": "React", "questions": [ { "id": 38, "level": "Basic", "sub_topic": "Fundamentals", "question_en": "What is React?", "question_bn": "React কী?", "details": { "what_is_en": "React is a declarative, efficient, and flexible JavaScript library for building user interfaces, based on a component architecture.", "what_is_bn": "React একটি ডিক্লেয়ারেটিভ এবং ফ্লেক্সিবল জাভাস্ক্রিপ্ট লাইব্রেরি যা ইউজার ইন্টারফেস (UI) তৈরির জন্য ব্যবহৃত হয়।" }, "vip_qa": { "question_en": "React is a 'library' not a 'framework'. What is the key distinction?", "answer_en": "The key distinction is 'inversion of control'. A **Framework** dictates your application's architecture and calls your code. A **Library** is a set of tools that you call. React is a library because it's focused on the UI layer and doesn't impose rules on routing or state management, giving developers more flexibility." } } ] };
const NextjsData = { "topic": "Next.js", "questions": [ { "id": 48, "level": "Intermediate", "sub_topic": "Fundamentals", "question_en": "What is Next.js?", "question_bn": "Next.js কী?", "details": { "what_is_en": "Next.js is a production-ready React framework that enables features like Server-Side Rendering (SSR) and Static Site Generation (SSG).", "what_is_bn": "Next.js হলো React-এর উপর ভিত্তি করে তৈরি একটি প্রোডাকশন-রেডি ফ্রেমওয়ার্ক।" }, "vip_qa": { "question_en": "What is the difference between a CSR React app and a Next.js SSR app?", "answer_en": "In a CSR app, the browser gets an empty HTML file and renders content after the JS bundle loads. In an SSR app, the server generates the full HTML and sends it to the browser, so the user sees content almost immediately. This is better for SEO and perceived performance." } } ] };
const TypescriptData = { "topic": "TypeScript", "questions": [ { "id": 54, "level": "Intermediate", "sub_topic": "Fundamentals", "question_en": "What is TypeScript?", "question_bn": "TypeScript কী?", "details": { "what_is_en": "TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript.", "what_is_bn": "TypeScript হলো JavaScript-এর একটি স্ট্যাটিক্যালি টাইপড সুপারসেট।" }, "vip_qa": { "question_en": "What is the difference between an `interface` and a `type` alias?", "answer_en": "An **`interface`** is primarily for defining object shapes and supports declaration merging. A **`type`** alias is more versatile (can define unions, tuples, etc.) but does not support merging. Use `interface` for object shapes, `type` for everything else." } } ] };
const TailwindcssData = { "topic": "TailwindCSS", "questions": [ { "id": 58, "level": "Basic", "sub_topic": "Fundamentals", "question_en": "What is TailwindCSS?", "question_bn": "TailwindCSS কী?", "details": { "what_is_en": "TailwindCSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in your markup.", "what_is_bn": "TailwindCSS একটি utility-first CSS ফ্রেমওয়ার্ক।" }, "vip_qa": { "question_en": "What are the main criticisms of utility-first CSS, and the counter-arguments?", "answer_en": "Criticism: It makes HTML 'messy'. Counter-argument: This is encapsulated in reusable components. Criticism: It's 'just inline styles'. Counter-argument: It uses a constrained design system and supports states and responsive design, which inline styles cannot." } } ] };
const NodejsData = { "topic": "Node.js", "questions": [ { "id": 63, "level": "Basic", "sub_topic": "Fundamentals", "question_en": "Why is Node.js single-threaded yet performant?", "question_bn": "Node.js কেন Single-Threaded হওয়া সত্ত্বেও পারফরম্যান্ট?", "details": { "what_is_en": "Node.js uses a single-threaded, non-blocking, asynchronous I/O model. Its Event Loop offloads I/O operations, allowing the main thread to handle other requests without being blocked.", "what_is_bn": "Node.js একটি single-threaded, non-blocking, asynchronous I/O মডেল ব্যবহার করে।" }, "vip_qa": { "question_en": "For what type of application would Node.js be a poor choice, and why?", "answer_en": "Node.js would be a poor choice for **CPU-bound applications** (e.g., video encoding). A long-running, synchronous, CPU-intensive task will block the single main thread, making the server completely unresponsive." } } ] };
const ExpressjsData = { "topic": "Express.js", "questions": [ { "id": 68, "level": "Intermediate", "sub_topic": "Middleware", "question_en": "What is middleware in Express.js?", "question_bn": "Express.js-এ মিডলওয়্যার কী?", "details": { "what_is_en": "Middleware is a function with access to the request (`req`), response (`res`), and `next()` function, which can execute code or modify the request-response cycle.", "what_is_bn": "মিডলওয়্যার হলো এমন একটি ফাংশন যা একটি HTTP রিকোয়েস্ট এবং রেসপন্স সাইকেলের মধ্যে অবস্থান করে।" }, "vip_qa": { "question_en": "What is the purpose of `express.Router()`?", "answer_en": "`express.Router()` creates a modular route handler. It allows you to group related routes into separate files (e.g., `userRoutes.js`) and then mount them on a path in your main app file (`app.use('/users', userRoutes)`), keeping your code organized." } } ] };
const MongodbData = { "topic": "MongoDB", "questions": [ { "id": 71, "level": "Intermediate", "sub_topic": "Mongoose and Schemas", "question_en": "What is Mongoose?", "question_bn": "Mongoose কী?", "details": { "what_is_en": "Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js.", "what_is_bn": "Mongoose হলো MongoDB এবং Node.js-এর জন্য একটি Object Data Modeling (ODM) লাইব্রেরি।" }, "vip_qa": { "question_en": "What is the difference between embedding and referencing documents?", "answer_en": "**Embedding:** You store related data within a single document. **Pros:** Fast reads. **Cons:** Data redundancy. **Referencing:** You store references (`ObjectId`) to documents in other collections. **Pros:** Reduces redundancy. **Cons:** Requires extra queries (`populate` or `$lookup`)." } } ] };
const GitGithubData = { "topic": "Git & GitHub", "questions": [ { "id": 76, "level": "Intermediate", "sub_topic": "Branching and Merging", "question_en": "What is a merge conflict?", "question_bn": "Merge Conflict কী?", "details": { "what_is_en": "A merge conflict occurs when Git cannot automatically resolve differences in code between two commits.", "what_is_bn": "Merge Conflict তখন ঘটে যখন Git দুটি ভিন্ন ব্রাঞ্চের পরিবর্তনগুলোকে স্বয়ংক্রিয়ভাবে একত্রিত করতে পারে না।" }, "vip_qa": { "question_en": "What is the difference between `git merge` and `git rebase`?", "answer_en": "`git merge` integrates changes by creating a new 'merge commit', preserving history. `git rebase` re-applies commits on top of another branch, creating a linear history but rewriting it. Never rebase a public, shared branch." } } ] };
const DevToolsData = { "topic": "Development Tools & Workflow", "questions": [ { "id": 81, "level": "Intermediate", "sub_topic": "API Testing", "question_en": "What is Postman?", "question_bn": "Postman কী?", "details": { "what_is_en": "Postman is an API platform for building and using APIs, simplifying the API lifecycle.", "what_is_bn": "Postman একটি API টেস্টিং এবং ডেভেলপমেন্ট টুল।" }, "vip_qa": { "question_en": "What are Postman 'Collections' and 'Environments'?", "answer_en": "**Collections** are groups of saved API requests. **Environments** are sets of key-value variables. Using them together allows you to run the same tests against different servers (dev, staging) by just switching the environment." } } ] };
const DevopsData = { "topic": "DevOps & Deployment", "questions": [ { "id": 86, "level": "Intermediate", "sub_topic": "Hosting Platforms", "question_en": "What are Vercel and Netlify?", "question_bn": "Vercel এবং Netlify কী?", "details": { "what_is_en": "Vercel and Netlify are modern web hosting and automation platforms for deploying frontend applications.", "what_is_bn": "Vercel এবং Netlify দুটিই আধুনিক ওয়েব হোস্টিং প্ল্যাটফর্ম।" }, "vip_qa": { "question_en": "Why is Vercel the preferred platform for deploying Next.js applications?", "answer_en": "Vercel created Next.js, so the platform is perfectly optimized to support all of Next.js's features out-of-the-box (SSR, SSG, ISR, API Routes, etc.) with zero configuration." } } ] };
const AiContentData = { "topic": "AI & Content Creation", "questions": [ { "id": 89, "level": "Intermediate", "sub_topic": "AI Code Assistants", "question_en": "What is GitHub Copilot?", "question_bn": "GitHub Copilot কী?", "details": { "what_is_en": "GitHub Copilot is an AI-powered code assistant that suggests code and entire functions in real-time.", "what_is_bn": "GitHub Copilot হলো একটি AI-চালিত কোড অ্যাসিস্ট্যান্ট যা রিয়েল-টাইমে কোড সাজেস্ট করে।" }, "vip_qa": { "question_en": "What is a potential pitfall of relying on AI for coding?", "answer_en": "The biggest danger is **blindly accepting suggestions** without understanding them. The AI can generate code that is subtly incorrect, inefficient, or has security vulnerabilities. The developer must always be the final reviewer." } } ] };


export const rawData = {
    "skillSphereQA": [
        HtmlData,
        CssData,
        JavascriptData,
        ReactData,
        NextjsData,
        TypescriptData,
        TailwindcssData,
        NodejsData,
        ExpressjsData,
        MongodbData,
        GitGithubData,
        DevToolsData,
        DevopsData,
        AiContentData,
    ]
};

// Data Processing
// Here, questions for all topics are being organized into an object.
export const questionsData = rawData.skillSphereQA.reduce((acc, currentTopic) => {
    if (currentTopic && currentTopic.topic) {
        // The topic name is being used as a key in lowercase and without spaces.
        const topicKey = currentTopic.topic.toLowerCase().replace(/\s/g, '').replace('&', 'and');
        acc[topicKey] = currentTopic.questions;
    }
    return acc;
}, {} as any);

